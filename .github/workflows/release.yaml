name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
      name: Upload Assets
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-latest, windows-latest]
          python: [3.6]
          include:
            - os: ubuntu-latest
              artifact_prefix: linux_x86_64
            - os: windows-latest
              artifact_prefix: win10_x86_64
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Get the tag name
          id: tag-name
          uses: olegtarasov/get-tag@v2

        - name: Build on Windows
          if: matrix.os == 'windows-latest'
          shell: pwsh
          run: |
            choco install wget 7zip.install
            pip install .[mpv,dev] pyinstaller
            cd dev
            ./build_windows.ps1

        - name: Build on Linux
          if: matrix.os == 'ubuntu-latest'
          run: |
            sudo apt-get update -y
            sudo apt-get install curl -y
            curl -fsSL https://get.docker.com | sudo sh
            sudo docker build -t vidify .
            sudo docker run -v $PWD/dev:/vidify/dev/dist vidify:latest /bin/sh -c 'cd dev; bash build_linux.sh'

        - name: Uploading Release Assets
          uses: softprops/action-gh-release@v1
          with:
            body: ""
            files: dev/vidify-${{ steps.tag-name.outputs.tag }}_${{ matrix.artifact_prefix }}.zip
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pypi:
      name: Upload to PyPi
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@master

        - name: Preparing Docker Image
          run: |
            sudo apt-get update -y
            sudo apt-get install curl -y
            curl -fsSL https://get.docker.com | sudo sh
            sudo docker build -t vidify .

        - name: Uploading
          env:
            TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
            TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          run: |
            sudo --preserve-env docker run \
                --env TWINE_USERNAME --env TWINE_PASSWORD \
                vidify /bin/sh -c \
                    'pip install twine; \
                    python setup.py sdist bdist_wheel; \
                    twine upload dist/*'
